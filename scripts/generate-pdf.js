#!/usr/bin/env node

/**
 * Script utilitaire pour tester la g√©n√©ration de PDF
 * Usage: pnpm gen:pdf
 */

const fs = require('fs');
const path = require('path');

// Donn√©es de test
const mockFormData = {
  company_intro: "Nous sommes une startup innovante dans le domaine de l'IA",
  goal_primary: "Refonte compl√®te de notre site web pour am√©liorer la conversion",
  kpis: ["Leads", "Inscriptions", "CA"],
  target_audience: "Professionnels de 25-45 ans, secteur tech, niveau interm√©diaire",
  scope: ["Site vitrine", "Blog", "Espace membre"],
  integrations: ["CRM", "Analytics", "Email marketing"],
  content_type: ["Articles", "Produits", "T√©moignages"],
  seo_priority: 6,
  tech_constraints: "React et Node.js obligatoires",
  timeline: "3-4 mois",
  budget_range: "25k‚Ç¨ - 50k‚Ç¨",
  maintenance: true,
  legal_requirements: ["RGPD", "Accessibilit√©"],
  contact_consent: true
};

const mockFormConfig = {
  title: "Brief Tekiyo - Test",
  theme: {
    mode: "dark",
    primary: "#FFFFFF",
    overlayOpacity: 0.35
  },
  slides: [
    {
      id: "company_intro",
      type: "long_text",
      label: "Pr√©sentez bri√®vement votre entreprise et son activit√© principale.",
      required: true
    },
    {
      id: "goal_primary",
      type: "short_text",
      label: "Objectif principal de la refonte en une phrase.",
      required: true
    },
    {
      id: "kpis",
      type: "multiselect",
      label: "KPI prioritaires sur 90 jours",
      required: true
    }
  ]
};

// Fonction pour g√©n√©rer un PDF de test
async function generateTestPDF() {
  try {
    console.log('üöÄ G√©n√©ration du PDF de test...');
    
    // Simuler la g√©n√©ration d'un PDF
    const pdfContent = {
      formConfig: mockFormConfig,
      formData: mockFormData,
      metadata: {
        generatedAt: new Date().toISOString(),
        version: '1.0.0',
        test: true
      }
    };
    
    // Cr√©er le dossier scripts s'il n'existe pas
    const scriptsDir = path.join(__dirname);
    if (!fs.existsSync(scriptsDir)) {
      fs.mkdirSync(scriptsDir, { recursive: true });
    }
    
    // Sauvegarder les donn√©es de test
    const testDataPath = path.join(scriptsDir, 'test-data.json');
    fs.writeFileSync(testDataPath, JSON.stringify(pdfContent, null, 2));
    
    console.log('‚úÖ Donn√©es de test g√©n√©r√©es et sauvegard√©es dans:', testDataPath);
    console.log('üìä R√©sum√© des donn√©es:');
    console.log(`   - Nombre de champs: ${Object.keys(mockFormData).length}`);
    console.log(`   - Nombre de slides: ${mockFormConfig.slides.length}`);
    console.log(`   - Th√®me: ${mockFormConfig.theme.mode}`);
    
    // Afficher quelques exemples de donn√©es
    console.log('\nüìù Exemples de r√©ponses:');
    Object.entries(mockFormData).slice(0, 3).forEach(([key, value]) => {
      console.log(`   - ${key}: ${typeof value === 'string' ? value.substring(0, 50) + '...' : value}`);
    });
    
    console.log('\nüéØ Pour tester la g√©n√©ration PDF r√©elle:');
    console.log('   1. Lancez l\'application: pnpm dev');
    console.log('   2. Remplissez le formulaire');
    console.log('   3. Utilisez le bouton d\'export PDF dans le HUD');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration du PDF de test:', error);
    process.exit(1);
  }
}

// Fonction pour valider les donn√©es
function validateTestData() {
  console.log('üîç Validation des donn√©es de test...');
  
  const requiredFields = mockFormConfig.slides
    .filter(slide => slide.required)
    .map(slide => slide.id);
  
  const missingFields = requiredFields.filter(field => !mockFormData[field]);
  
  if (missingFields.length > 0) {
    console.warn('‚ö†Ô∏è  Champs requis manquants:', missingFields);
  } else {
    console.log('‚úÖ Tous les champs requis sont remplis');
  }
  
  // V√©rifier les types de donn√©es
  const validationResults = Object.entries(mockFormData).map(([key, value]) => {
    const slide = mockFormConfig.slides.find(s => s.id === key);
    if (!slide) return { field: key, valid: false, error: 'Slide non trouv√©e' };
    
    let valid = true;
    let error = null;
    
    switch (slide.type) {
      case 'multiselect':
        valid = Array.isArray(value);
        error = valid ? null : 'Doit √™tre un tableau';
        break;
      case 'yes_no':
        valid = typeof value === 'boolean';
        error = valid ? null : 'Doit √™tre un bool√©en';
        break;
      case 'scale':
        valid = typeof value === 'number' && value >= 1 && value <= 7;
        error = valid ? null : 'Doit √™tre un nombre entre 1 et 7';
        break;
      case 'consent':
        valid = typeof value === 'boolean' && value === true;
        error = valid ? null : 'Doit √™tre true pour le consentement';
        break;
      default:
        valid = typeof value === 'string' && value.length > 0;
        error = valid ? null : 'Doit √™tre une cha√Æne non vide';
    }
    
    return { field: key, valid, error };
  });
  
  const invalidFields = validationResults.filter(r => !r.valid);
  
  if (invalidFields.length > 0) {
    console.warn('‚ö†Ô∏è  Champs avec des donn√©es invalides:');
    invalidFields.forEach(field => {
      console.warn(`   - ${field.field}: ${field.error}`);
    });
  } else {
    console.log('‚úÖ Toutes les donn√©es sont valides');
  }
  
  return validationResults;
}

// Fonction principale
async function main() {
  console.log('üìã Script de test pour la g√©n√©ration PDF - Formulaire Tekiyo\n');
  
  // Valider les donn√©es
  validateTestData();
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // G√©n√©rer le PDF de test
  await generateTestPDF();
  
  console.log('\nüéâ Script termin√© avec succ√®s !');
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Erreur fatale:', error);
    process.exit(1);
  });
}

module.exports = {
  generateTestPDF,
  validateTestData,
  mockFormData,
  mockFormConfig
};
